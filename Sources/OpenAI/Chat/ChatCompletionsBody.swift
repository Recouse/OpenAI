//
//  ChatCompletionsBody.swift
//  OpenAI
//
//  Created by Firdavs Khaydarov on 11/04/2023.
//

import Foundation

public extension ChatCompletions {
    struct Body: Encodable {
        public struct Message: Codable {
            /// The role of the author of this message.
            public var role: Role
            /// The contents of the message
            public var content: String
            /// The name of the user in a multi-user chat
            public var name: String?
            
            public init(role: Role, content: String, name: String? = nil) {
                self.role = role
                self.content = content
                self.name = name
            }

            public static func system(_ content: String) -> Self {
                Self(role: .system, content: content)
            }
            
            public static func assistant(_ content: String) -> Self {
                Self(role: .assistant, content: content)
            }
            
            public static func user(_ content: String) -> Self {
                Self(role: .user, content: content)
            }
        }
        
        /// Model ID used to generate the response, like gpt-4o or o3. OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points.
        public var model: String
        /// The messages to generate chat completions for, in the chat format.
        public var messages: [Message]
        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
        public var frequencyPenalty: Double?
        /// Modify the likelihood of specified tokens appearing in the completion.
        ///
        /// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
        public var logitBias: [Int: Int]?
        /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message.
        public var logprobs: Bool?
        /// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
        public var maxCompletionTokens: Int?
        /// Set of 16 key-value pairs that can be attached to an object.
        ///
        /// This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
        ///
        /// Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters.
        public var metadata: [String: String]?
        /// Output types that you would like the model to generate.
        ///
        /// Most models are capable of generating text, which is the default: `["text"]`
        ///
        /// The `gpt-4o-audio-preview` model can also be used to generate audio. To request that this model
        /// generate both text and audio responses, you can use: `["text", "audio"]`
        public var modalities: [Modality]?
        /// How many chat completion choices to generate for each input message.
        public var n: Int?
        /// Whether to enable parallel function calling during tool use.
        public var parallelToolCalls: Bool?
        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
        public var presencePenalty: Double?
        /// Used by OpenAI to cache responses for similar requests to optimize your cache hit rates.
        public var promptCacheKey: String?
        /// Constrains effort on reasoning for reasoning models.
        ///
        /// Currently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can
        /// result in faster responses and fewer tokens used on reasoning in a response.
        public var reasoningEffort: Effort?
        /// An object specifying the format that the model must output. Compatible with GPT-4 Turbo and gpt-3.5-turbo-1106.
        /// Setting `type` to `.jsonObject` enables JSON mode, which guarantees the message the model generates is valid JSON.
        public var responseFormat: ResponseFormat?
        /// A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies.
        ///
        /// The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information.
        public var safetyIdentifier: String?
        /// Specifies the processing type used for serving the request.
        ///
        /// * If set to `auto`, then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use `default`.
        /// * If set to `default`, then the request will be processed with the standard pricing and performance for the selected model.
        /// * If set to `flex` or `priority`, then the request will be processed with the corresponding service tier.
        /// Contact sales to learn more about Priority processing.
        /// * When not set, the default behavior is `auto`.
        ///
        /// When the service_tier parameter is set, the response body will include the service_tier value
        /// based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.
        public var serviceTier: ServiceTier?
        /// Up to 4 sequences where the API will stop generating further tokens.
        ///
        /// Not supported with latest reasoning models `o3` and `o4-mini`.
        public var stop: [String]?
        /// Whether or not to store the output of this chat completion request for use in our model distillation or evals products.
        ///
        /// Supports text and image inputs.
        /// - Note: image inputs over 10MB will be dropped.
        public var store: Bool?
        /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
        public var stream: Bool
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        ///
        /// We generally recommend altering this or `top_p` but not both.
        public var temperature: Double?
        /// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability.
        ///
        /// `logprobs` must be set to `true` if this parameter is used.
        public var topLogprobs: Int?
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        public var topP: Double?
    }
}
