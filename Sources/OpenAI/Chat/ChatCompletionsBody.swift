//
//  ChatCompletionsBody.swift
//  OpenAI
//
//  Created by Firdavs Khaydarov on 11/04/2023.
//

import Foundation

public extension ChatCompletions {
    struct Body: Encodable {
        public struct Message: Codable {
            /// The role of the author of this message.
            public var role: Role
            /// The contents of the message
            public var content: String
            /// The name of the user in a multi-user chat
            public var name: String?
            
            public init(role: Role, content: String, name: String? = nil) {
                self.role = role
                self.content = content
                self.name = name
            }

            public static func system(_ content: String) -> Self {
                Self(role: .system, content: content)
            }
            
            public static func assistant(_ content: String) -> Self {
                Self(role: .assistant, content: content)
            }
            
            public static func user(_ content: String) -> Self {
                Self(role: .user, content: content)
            }
        }
        
        /// ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-3.5-turbo-0301` are supported.
        public var model: String
        /// The messages to generate chat completions for, in the [chat format](/docs/guides/chat/introduction).
        public var messages: [Message]
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        ///
        /// We generally recommend altering this or `top_p` but not both.
        public var temperature: Double?
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        ///
        /// We generally recommend altering this or `temperature` but not both.
        public var topP: Double?
        /// How many chat completion choices to generate for each input message.
        public var n: Int?
        /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
        public var stream: Bool
        /// Up to 4 sequences where the API will stop generating further tokens.
        public var stop: [String]?
        /// The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
        public var maxTokens: Int?
        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
        ///
        /// [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
        public var presencePenalty: Double?
        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
        ///
        /// [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
        public var frequencyPenalty: Double?
        /// An object specifying the format that the model must output. Compatible with GPT-4 Turbo and gpt-3.5-turbo-1106.
        /// Setting `type` to `.jsonObject` enables JSON mode, which guarantees the message the model generates is valid JSON.
        public var responseFormat: ResponseFormat?
        /// Modify the likelihood of specified tokens appearing in the completion.
        ///
        /// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
        public var logitBias: [Int: Int]?
        /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
        ///
        /// Example: "user-1234"
        public var user: String?
    }
}
